<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vueblog1.6</title>
      <link href="/2022/09/04/vueblog1.6/"/>
      <url>/2022/09/04/vueblog1.6/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@RestController@RequestMapping<span class="token punctuation">(</span><span class="token string">"/blog"</span><span class="token punctuation">)</span>public class BlogController <span class="token punctuation">{</span>    @Autowired    BlogService blogService<span class="token punctuation">;</span>    @GetMapping<span class="token punctuation">(</span><span class="token string">"/blogs"</span><span class="token punctuation">)</span>    public Result list<span class="token punctuation">(</span>@RequestParam<span class="token punctuation">(</span>defaultValue <span class="token operator">=</span> <span class="token string">"1"</span><span class="token punctuation">)</span> Integer currentPage<span class="token punctuation">)</span><span class="token punctuation">{</span>        Page page <span class="token operator">=</span> new Page<span class="token punctuation">(</span>currentPage,5<span class="token punctuation">)</span><span class="token punctuation">;</span>        IPage pageData <span class="token operator">=</span> blogService.page<span class="token punctuation">(</span>page,new QueryWrapper<span class="token operator">&lt;</span>Blog<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>.orderByDesc<span class="token punctuation">(</span><span class="token string">"created"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> Result.succ<span class="token punctuation">(</span>pageData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @GetMapping<span class="token punctuation">(</span><span class="token string">"/blogs/{id}"</span><span class="token punctuation">)</span>    public Result detail<span class="token punctuation">(</span>@PathVariable<span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> Long <span class="token function">id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Blog blog <span class="token operator">=</span> blogService.getById<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert.notNull<span class="token punctuation">(</span>blog,<span class="token string">"该博客已被删除"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> Result.succ<span class="token punctuation">(</span>blog<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @RequiresAuthentication    @PostMapping<span class="token punctuation">(</span><span class="token string">"/blogs/edit"</span><span class="token punctuation">)</span>    public Result edit<span class="token punctuation">(</span>@Validated @RequestBody Blog blog<span class="token punctuation">)</span><span class="token punctuation">{</span>        Blog temp <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>blog.getId<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            temp <span class="token operator">=</span> blogService.getById<span class="token punctuation">(</span>blog.getId<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            //只能编辑自己的文章            Assert.isTrue<span class="token punctuation">(</span>temp.getUserId<span class="token punctuation">(</span><span class="token punctuation">)</span> .equals<span class="token punctuation">(</span>ShiroUtil.getProfile<span class="token punctuation">(</span><span class="token punctuation">)</span>.getId<span class="token punctuation">(</span><span class="token punctuation">))</span> ,<span class="token string">"没有权限编辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            //Assert.isTrue<span class="token punctuation">(</span>temp.getUserId<span class="token punctuation">(</span><span class="token punctuation">)</span>.longValue<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ShiroUtil.getProfile<span class="token punctuation">(</span><span class="token punctuation">)</span>.getId<span class="token punctuation">(</span><span class="token punctuation">)</span>.longValue<span class="token punctuation">(</span><span class="token punctuation">)</span>, <span class="token string">"没有权限编辑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>else<span class="token punctuation">{</span>            temp <span class="token operator">=</span> new Blog<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            temp.setUserId<span class="token punctuation">(</span>ShiroUtil.getProfile<span class="token punctuation">(</span><span class="token punctuation">)</span>.getId<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            temp.setCreated<span class="token punctuation">(</span>LocalDateTime.now<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            temp.setStatus<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        BeanUtil.copyProperties<span class="token punctuation">(</span>blog,temp,<span class="token string">"id"</span>,<span class="token string">"userId"</span>,<span class="token string">"created"</span>,<span class="token string">"status"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        blogService.saveOrUpdate<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> Result.succ<span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里有一点注意，用psotman测试时，博客接口是需要登录才能用，所以登录测试后，去请求头复制Autoritation的内容，在新的测试中，请求头加上Autoritation和它的内容（键值对），并勾上，一般登上要把cookie全清了才算退出登陆。</p>]]></content>
      
      
      <categories>
          
          <category> vueblog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vueblog1.5</title>
      <link href="/2022/09/04/vueblog1.5/"/>
      <url>/2022/09/04/vueblog1.5/</url>
      
        <content type="html"><![CDATA[<p>登录的逻辑其实很简答，只需要接受账号密码，然后把用户的id生成jwt，返回给前段，为了后续的jwt的延期，所以我们把jwt放在header上</p><p>· 包名.controller.AccountController</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@RestControllerpublic class AccountController <span class="token punctuation">{</span>    @Autowired    UserService userService<span class="token punctuation">;</span>    @Autowired    JwtUtils jwtUtils<span class="token punctuation">;</span>    @PostMapping<span class="token punctuation">(</span><span class="token string">"/login"</span><span class="token punctuation">)</span>    public Result login<span class="token punctuation">(</span>@Validated @RequestBody LoginDto loginDto, HttpServletResponse response<span class="token punctuation">)</span><span class="token punctuation">{</span>        User user <span class="token operator">=</span> userService.getOne<span class="token punctuation">(</span>new QueryWrapper<span class="token operator">&lt;</span>User<span class="token operator">&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span>.eq<span class="token punctuation">(</span><span class="token string">"username"</span>,loginDto.getUsername<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Assert.notNull<span class="token punctuation">(</span>user,<span class="token string">"用户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//断言拦截        if<span class="token punctuation">(</span><span class="token operator">!</span>user.getPassword<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span>SecureUtil.md5<span class="token punctuation">(</span>loginDto.getPassword<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">))</span><span class="token punctuation">{</span>            <span class="token builtin class-name">return</span> Result.fail<span class="token punctuation">(</span><span class="token string">"密码不正确"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        String jwt <span class="token operator">=</span> jwtUtils.generateToken<span class="token punctuation">(</span>user.getId<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        response.setHeader<span class="token punctuation">(</span><span class="token string">"Authorization"</span>,jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>        response.setHeader<span class="token punctuation">(</span><span class="token string">"Access-control-Expose-Headers"</span>,<span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> Result.succ<span class="token punctuation">(</span>MapUtil.builder<span class="token punctuation">(</span><span class="token punctuation">)</span>                .put<span class="token punctuation">(</span><span class="token string">"id"</span>, user.getId<span class="token punctuation">(</span><span class="token punctuation">))</span>                .put<span class="token punctuation">(</span><span class="token string">"username"</span>, user.getUsername<span class="token punctuation">(</span><span class="token punctuation">))</span>                .put<span class="token punctuation">(</span><span class="token string">"avatar"</span>, user.getAvatar<span class="token punctuation">(</span><span class="token punctuation">))</span>                .put<span class="token punctuation">(</span><span class="token string">"email"</span>, user.getEmail<span class="token punctuation">(</span><span class="token punctuation">))</span>                .map<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @RequiresAuthentication    @PostMapping<span class="token punctuation">(</span><span class="token string">"/logout"</span><span class="token punctuation">)</span>    public Result <span class="token function-name function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        SecurityUtils.getSubject<span class="token punctuation">(</span><span class="token punctuation">)</span>.logout<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> Result.succ<span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>记得接口测试，用户名是Markerhub（数据库有），密码是6个1</p>]]></content>
      
      
      <categories>
          
          <category> vueblog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vueblog1.4</title>
      <link href="/2022/09/04/vueblog1.4/"/>
      <url>/2022/09/04/vueblog1.4/</url>
      
        <content type="html"><![CDATA[<p>主要针对后端数据，用Hibernate validatior来做校验（记得之前的引包，新版的需要手动引）</p><h1 id="实体类加校验规则"><a href="#实体类加校验规则" class="headerlink" title="实体类加校验规则"></a>实体类加校验规则</h1><p>· 包名.entity.User</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">   @Slf4j@Data@EqualsAndHashCode<span class="token punctuation">(</span>callSuper <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span>@Accessors<span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>@TableName<span class="token punctuation">(</span><span class="token string">"m_user"</span><span class="token punctuation">)</span>public class User implements Serializable <span class="token punctuation">{</span>    private static final long serialVersionUID <span class="token operator">=</span> 1L<span class="token punctuation">;</span>    @TableId<span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"id"</span>, <span class="token builtin class-name">type</span> <span class="token operator">=</span> IdType.AUTO<span class="token punctuation">)</span>//标识为数据库主键    private Long <span class="token function">id</span><span class="token punctuation">;</span>    @NotBlank<span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"昵称不能为空"</span><span class="token punctuation">)</span>    private String username<span class="token punctuation">;</span>    private String avatar<span class="token punctuation">;</span>    @NotBlank<span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"邮箱不能为空"</span><span class="token punctuation">)</span>    @Email<span class="token punctuation">(</span>message <span class="token operator">=</span> <span class="token string">"邮箱格式不正确"</span><span class="token punctuation">)</span>    private String email<span class="token punctuation">;</span>    private String password<span class="token punctuation">;</span>    private Integer status<span class="token punctuation">;</span>    private LocalDateTime created<span class="token punctuation">;</span>    private LocalDateTime lastLogin<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>在UserController写测试方法，用postman测试接口，body-raw-json，用json方法体</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/** * 测试实体校验 * @param user * @return */@PostMapping<span class="token punctuation">(</span><span class="token string">"/save"</span><span class="token punctuation">)</span>public Object testUser<span class="token punctuation">(</span>@Validated @RequestBody User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token builtin class-name">return</span> user.toString<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="跨域问题"><a href="#跨域问题" class="headerlink" title="跨域问题"></a>跨域问题</h1><p>·包名.config.CorsConfig</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@Configurationpublic class CorsConfig implements WebMvcConfigurer <span class="token punctuation">{</span>    @Override    public void addCorsMappings<span class="token punctuation">(</span>CorsRegistry registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>        registry.addMapping<span class="token punctuation">(</span><span class="token string">"/**"</span><span class="token punctuation">)</span>                /*                .allowedOrigins<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                SpringBoot升级2.4.0之后，跨域配置中的.allowedOrigins不再可用                */                .allowedOriginPatterns<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span>                .allowedMethods<span class="token punctuation">(</span><span class="token string">"GET"</span>, <span class="token string">"HEAD"</span>, <span class="token string">"POST"</span>, <span class="token string">"PUT"</span>, <span class="token string">"DELETE"</span>, <span class="token string">"OPTIONS"</span><span class="token punctuation">)</span>                .allowCredentials<span class="token punctuation">(</span>true<span class="token punctuation">)</span>                .maxAge<span class="token punctuation">(</span><span class="token number">3600</span><span class="token punctuation">)</span>                .allowedHeaders<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vueblog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vueblog1.3</title>
      <link href="/2022/09/04/vueblog1.3/"/>
      <url>/2022/09/04/vueblog1.3/</url>
      
        <content type="html"><![CDATA[<p>通过使用@ControllerAdvice来进行统一异常处理，@ExceptionHandler(value = RuntimeException.class)来指定捕获的Exception各个类型异常 ，这个异常的处理，是全局的，所有类似的异常，都会跑到这个地方处理。</p><p>@ControllerAdvice表示定义全局控制器异常处理<br>@ExceptionHandler表示针对性异常处理，可对每种异常针对性处理</p><p>· 包名.common.exception.GlobalExceptionHandler</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> com.markerhub.vueblog.common.lang.Result<span class="token punctuation">;</span><span class="token function">import</span> lombok.extern.slf4j.Slf4j<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.ShiroException<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.http.HttpStatus<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.validation.BindingResult<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.validation.ObjectError<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.web.bind.MethodArgumentNotValidException<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.web.bind.annotation.ExceptionHandler<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.web.bind.annotation.ResponseStatus<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.web.bind.annotation.RestControllerAdvice<span class="token punctuation">;</span>@Slf4j@RestControllerAdvicepublic class GlobalExceptionHandler <span class="token punctuation">{</span>    @ResponseStatus<span class="token punctuation">(</span>HttpStatus.UNAUTHORIZED<span class="token punctuation">)</span>    @ExceptionHandler<span class="token punctuation">(</span>value <span class="token operator">=</span> ShiroException.class<span class="token punctuation">)</span>    public Result handler<span class="token punctuation">(</span>ShiroException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        log.error<span class="token punctuation">(</span><span class="token string">"运行时异常：----------{}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> Result.fail<span class="token punctuation">(</span><span class="token number">401</span>,e.getMessage<span class="token punctuation">(</span><span class="token punctuation">)</span>,null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>//shiro抛出的异常，比如没有权限，用户登录异常    @ResponseStatus<span class="token punctuation">(</span>HttpStatus.BAD_REQUEST<span class="token punctuation">)</span>    @ExceptionHandler<span class="token punctuation">(</span>value <span class="token operator">=</span> RuntimeException.class<span class="token punctuation">)</span>    public Result handler<span class="token punctuation">(</span>RuntimeException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        log.error<span class="token punctuation">(</span><span class="token string">"运行时异常：----------{}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> Result.fail<span class="token punctuation">(</span>e.getMessage<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>//捕捉其他异常    @ResponseStatus<span class="token punctuation">(</span>HttpStatus.BAD_REQUEST<span class="token punctuation">)</span>    @ExceptionHandler<span class="token punctuation">(</span>value <span class="token operator">=</span> IllegalArgumentException.class<span class="token punctuation">)</span>    public Result handler<span class="token punctuation">(</span>IllegalArgumentException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        log.error<span class="token punctuation">(</span><span class="token string">"Assert异常：----------------{}"</span>, e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> Result.fail<span class="token punctuation">(</span>e.getMessage<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>//处理Assert的异常    @ResponseStatus<span class="token punctuation">(</span>HttpStatus.BAD_REQUEST<span class="token punctuation">)</span>    @ExceptionHandler<span class="token punctuation">(</span>value <span class="token operator">=</span> MethodArgumentNotValidException.class<span class="token punctuation">)</span>    public Result handler<span class="token punctuation">(</span>MethodArgumentNotValidException e<span class="token punctuation">)</span><span class="token punctuation">{</span>        log.error<span class="token punctuation">(</span><span class="token string">"实体校验异常：----------{}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BindingResult bindingResult <span class="token operator">=</span> e.getBindingResult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ObjectError objectError <span class="token operator">=</span> bindingResult.getAllErrors<span class="token punctuation">(</span><span class="token punctuation">)</span>.stream<span class="token punctuation">(</span><span class="token punctuation">)</span>.findFirst<span class="token punctuation">(</span><span class="token punctuation">)</span>.get<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> Result.fail<span class="token punctuation">(</span>objectError.getDefaultMessage<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>//处理实体校验的异常<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vueblog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vueblog1.2</title>
      <link href="/2022/09/03/vueblog1.2/"/>
      <url>/2022/09/03/vueblog1.2/</url>
      
        <content type="html"><![CDATA[<p>整合shiro+jwt，主要还是希望用jwt作为用户权限进行身份验证<br>相当于现实网站中你可以上B站主页看视频，但涉及到收藏或者个人信息需要登陆的功能，jwt就相当于其中进入这些功能的钥匙，没有钥匙，你可以看一下门的外观或者按钮之类，相当于看网页外观或者不需要登陆的功能</p><h1 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.crazycake<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>shiro-redis-spring-boot-starter<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">3.2</span>.<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/version<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- hutool工具类--<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>cn.hutool<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>hutool-all<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">5.3</span>.<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>/version<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>-- jwt --<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>io.jsonwebtoken<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>jjwt<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">0.9</span>.<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/version<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>官方文档：<a href="https://github.com/alexxiyang/shiro-redis/blob/master/docs/README.md#spring-boot-starter">https://github.com/alexxiyang/shiro-redis/blob/master/docs/README.md#spring-boot-starter</a></p><p>对了，把redis下了，因为这个包整合了redis</p><h1 id="重写shiroconfig"><a href="#重写shiroconfig" class="headerlink" title="重写shiroconfig"></a>重写shiroconfig</h1><p>· 包名.config.ShiroConfig</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package com.markerhub.vueblog.config<span class="token punctuation">;</span>//记得改包名<span class="token function">import</span> com.markerhub.vueblog.shiro.AccountRealm<span class="token punctuation">;</span><span class="token function">import</span> com.markerhub.vueblog.shiro.JwtFilter<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.mgt.SecurityManager<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.mgt.SessionsSecurityManager<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.session.mgt.SessionManager<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.spring.web.ShiroFilterFactoryBean<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.spring.web.config.DefaultShiroFilterChainDefinition<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.spring.web.config.ShiroFilterChainDefinition<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.web.mgt.DefaultWebSecurityManager<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.web.session.mgt.DefaultWebSessionManager<span class="token punctuation">;</span><span class="token function">import</span> org.crazycake.shiro.RedisCacheManager<span class="token punctuation">;</span><span class="token function">import</span> org.crazycake.shiro.RedisSessionDAO<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.beans.factory.annotation.Autowired<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.context.annotation.Bean<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.context.annotation.Configuration<span class="token punctuation">;</span><span class="token function">import</span> javax.servlet.Filter<span class="token punctuation">;</span><span class="token function">import</span> java.util.HashMap<span class="token punctuation">;</span><span class="token function">import</span> java.util.LinkedHashMap<span class="token punctuation">;</span><span class="token function">import</span> java.util.Map<span class="token punctuation">;</span>@Configurationpublic class ShiroConfig <span class="token punctuation">{</span>    @Autowired    RedisSessionDAO redisSessionDAO<span class="token punctuation">;</span>    @Autowired    RedisCacheManager redisCacheManager<span class="token punctuation">;</span>    @Autowired    JwtFilter jwtFilter<span class="token punctuation">;</span>    //Shiro-redis    @Bean    public SessionManager <span class="token function-name function">sessionManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultWebSessionManager sessionManager <span class="token operator">=</span> new DefaultWebSessionManager<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        // inject redisSessionDAO        sessionManager.setSessionDAO<span class="token punctuation">(</span>redisSessionDAO<span class="token punctuation">)</span><span class="token punctuation">;</span>        // other stuff<span class="token punctuation">..</span>.        <span class="token builtin class-name">return</span> sessionManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>//shiro的权限数据和会话信息能保存在redis    @Bean    public SessionsSecurityManager securityManager<span class="token punctuation">(</span>AccountRealm accountRealm,                                                   SessionManager sessionManager<span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultWebSecurityManager securityManager <span class="token operator">=</span> new DefaultWebSecurityManager<span class="token punctuation">(</span>accountRealm<span class="token punctuation">)</span><span class="token punctuation">;</span>        //inject sessionManager        securityManager.setSessionManager<span class="token punctuation">(</span>sessionManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        // inject redisCacheManager        securityManager.setCacheManager<span class="token punctuation">(</span>redisCacheManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        // other stuff<span class="token punctuation">..</span>.        <span class="token builtin class-name">return</span> securityManager<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Bean    public ShiroFilterChainDefinition <span class="token function-name function">shiroFilterChainDefinition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DefaultShiroFilterChainDefinition chainDefinition <span class="token operator">=</span> new DefaultShiroFilterChainDefinition<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String, String<span class="token operator">&gt;</span> filterMap <span class="token operator">=</span> new LinkedHashMap<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterMap.put<span class="token punctuation">(</span><span class="token string">"/**"</span>, <span class="token string">"jwt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> // 主要通过注解方式校验权限,所有链接都需要经过这个过滤器        chainDefinition.addPathDefinitions<span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> chainDefinition<span class="token punctuation">;</span>    <span class="token punctuation">}</span>//哪些链接需要经过哪些过滤器    @Bean<span class="token punctuation">(</span><span class="token string">"shiroFilterFactoryBean"</span><span class="token punctuation">)</span>    public ShiroFilterFactoryBean shiroFilterFactoryBean<span class="token punctuation">(</span>SecurityManager securityManager,                                                         ShiroFilterChainDefinition shiroFilterChainDefinition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ShiroFilterFactoryBean shiroFilter <span class="token operator">=</span> new ShiroFilterFactoryBean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shiroFilter.setSecurityManager<span class="token punctuation">(</span>securityManager<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String, Filter<span class="token operator">&gt;</span> filters <span class="token operator">=</span> new HashMap<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filters.put<span class="token punctuation">(</span><span class="token string">"jwt"</span>, jwtFilter<span class="token punctuation">)</span><span class="token punctuation">;</span>        shiroFilter.setFilters<span class="token punctuation">(</span>filters<span class="token punctuation">)</span><span class="token punctuation">;</span>        Map<span class="token operator">&lt;</span>String, String<span class="token operator">&gt;</span> filterMap <span class="token operator">=</span> shiroFilterChainDefinition.getFilterChainMap<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        shiroFilter.setFilterChainDefinitionMap<span class="token punctuation">(</span>filterMap<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> shiroFilter<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="新建一个realm"><a href="#新建一个realm" class="headerlink" title="新建一个realm"></a>新建一个realm</h1><p>重写三个方法<br>· supports：为了让realm支持jwt的凭证校验<br>· doGetAuthorizationInfo：权限校验<br>· doGetAuthenticationInfo：登录认证校验</p><p>· 包名.shiro.AccountRealm</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package com.markerhub.vueblog.shiro<span class="token punctuation">;</span><span class="token function">import</span> com.markerhub.vueblog.entity.User<span class="token punctuation">;</span><span class="token function">import</span> com.markerhub.vueblog.service.UserService<span class="token punctuation">;</span><span class="token function">import</span> com.markerhub.vueblog.util.JwtUtils<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.authc.*<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.authz.AuthorizationInfo<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.realm.AuthorizingRealm<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.subject.PrincipalCollection<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.beans.BeanUtils<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.beans.factory.annotation.Autowired<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.stereotype.Component<span class="token punctuation">;</span>///安全数据，例如权限、用户、角色等@Componentpublic class AccountRealm extends AuthorizingRealm <span class="token punctuation">{</span>    @Autowired    JwtUtils jwtUtils<span class="token punctuation">;</span>    @Autowired    UserService userService<span class="token punctuation">;</span>    /*    使其能识别自定义token     */    @Override    public boolean supports<span class="token punctuation">(</span>AuthenticationToken token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> token instanceof JwtToken<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    @Override    protected AuthorizationInfo doGetAuthorizationInfo<span class="token punctuation">(</span>PrincipalCollection principalCollection<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>//获取权限，返回给Shiro    @Override    protected AuthenticationInfo doGetAuthenticationInfo<span class="token punctuation">(</span>AuthenticationToken authenticationToken<span class="token punctuation">)</span> throws AuthenticationException <span class="token punctuation">{</span>        JwtToken jwtToken <span class="token operator">=</span> <span class="token punctuation">(</span>JwtToken<span class="token punctuation">)</span> authenticationToken<span class="token punctuation">;</span>        String userId <span class="token operator">=</span> jwtUtils.getClaimByToken<span class="token variable"><span class="token punctuation">((</span>String<span class="token punctuation">)</span> jwtToken.getPrincipal<span class="token punctuation">(</span><span class="token punctuation">))</span></span>.getSubject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> userService.getById<span class="token punctuation">(</span>Long.valueOf<span class="token punctuation">(</span>userId<span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">{</span>            throw new UnknownAccountException<span class="token punctuation">(</span><span class="token string">"账户不存在"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>user.getStatus<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> -1<span class="token punctuation">)</span><span class="token punctuation">{</span>            throw new LockedAccountException<span class="token punctuation">(</span><span class="token string">"账户被锁定"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>//被锁定        AccountProfile accountProfile <span class="token operator">=</span> new AccountProfile<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        BeanUtils.copyProperties<span class="token punctuation">(</span>user,accountProfile<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"-------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> new SimpleAuthenticationInfo<span class="token punctuation">(</span>accountProfile,jwtToken.getCredentials<span class="token punctuation">(</span><span class="token punctuation">)</span>,getName<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>//实现登陆信息认证    <span class="token punctuation">}</span>//密码校验，认证<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="自定义JwtToken"><a href="#自定义JwtToken" class="headerlink" title="自定义JwtToken"></a>自定义JwtToken</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package com.markerhub.vueblog.shiro<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.authc.AuthenticationToken<span class="token punctuation">;</span>/*shiro默认supports的是UsernamePasswordToken，而现在采用了jwt的方式，所以这里自定义一个JwtToken，来完成shiro的supports方法。 */public class JwtToken implements AuthenticationToken <span class="token punctuation">{</span>    private String token<span class="token punctuation">;</span>    public JwtToken<span class="token punctuation">(</span>String jwt<span class="token punctuation">)</span><span class="token punctuation">{</span>        this.token <span class="token operator">=</span> jwt<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    /*     * 返回身份信息，相当于用户的用户名     */    @Override    public Object <span class="token function-name function">getPrincipal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    /*     * 返回用户凭证信息，相当于用户的用户密码     */    @Override    public Object <span class="token function-name function">getCredentials</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> token<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="JwtUtil工具类"><a href="#JwtUtil工具类" class="headerlink" title="JwtUtil工具类"></a>JwtUtil工具类</h1><p>wtUtils是个生成和校验jwt的工具类，其中有些jwt相关的密钥信息是从项目配置文件中配置的。<br>· 包名.shiro.AccountProfile</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">package com.markerhub.vueblog.util<span class="token punctuation">;</span><span class="token function">import</span> io.jsonwebtoken.Claims<span class="token punctuation">;</span><span class="token function">import</span> io.jsonwebtoken.Jwts<span class="token punctuation">;</span><span class="token function">import</span> io.jsonwebtoken.SignatureAlgorithm<span class="token punctuation">;</span><span class="token function">import</span> lombok.Data<span class="token punctuation">;</span><span class="token function">import</span> lombok.extern.slf4j.Slf4j<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.boot.context.properties.ConfigurationProperties<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.stereotype.Component<span class="token punctuation">;</span><span class="token function">import</span> java.util.Date<span class="token punctuation">;</span>@Slf4j@Data@Component@ConfigurationProperties<span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"markerhub.jwt"</span><span class="token punctuation">)</span>//稍后配置会写public class JwtUtils <span class="token punctuation">{</span>    private String secret<span class="token punctuation">;</span>    private long expire<span class="token punctuation">;</span>    private String header<span class="token punctuation">;</span>    /**     * 生成jwt token     */    public String generateToken<span class="token punctuation">(</span>long userId<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Date nowDate <span class="token operator">=</span> new Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //过期时间        Date expireDate <span class="token operator">=</span> new Date<span class="token punctuation">(</span>nowDate.getTime<span class="token punctuation">(</span><span class="token punctuation">)</span> + expire * <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> Jwts.builder<span class="token punctuation">(</span><span class="token punctuation">)</span>                .setHeaderParam<span class="token punctuation">(</span><span class="token string">"typ"</span>, <span class="token string">"JWT"</span><span class="token punctuation">)</span>                .setSubject<span class="token punctuation">(</span>userId+<span class="token string">""</span><span class="token punctuation">)</span>                .setIssuedAt<span class="token punctuation">(</span>nowDate<span class="token punctuation">)</span>                .setExpiration<span class="token punctuation">(</span>expireDate<span class="token punctuation">)</span>                .signWith<span class="token punctuation">(</span>SignatureAlgorithm.HS512, secret<span class="token punctuation">)</span>                .compact<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    // 获取jwt的信息    public Claims getClaimByToken<span class="token punctuation">(</span>String token<span class="token punctuation">)</span> <span class="token punctuation">{</span>        try <span class="token punctuation">{</span>            <span class="token builtin class-name">return</span> Jwts.parser<span class="token punctuation">(</span><span class="token punctuation">)</span>                    .setSigningKey<span class="token punctuation">(</span>secret<span class="token punctuation">)</span>                    .parseClaimsJws<span class="token punctuation">(</span>token<span class="token punctuation">)</span>                    .getBody<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>catch <span class="token punctuation">(</span>Exception e<span class="token punctuation">)</span><span class="token punctuation">{</span>            log.debug<span class="token punctuation">(</span><span class="token string">"validate is token error "</span>, e<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token builtin class-name">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    /**     * token是否过期     * @return  true：过期     */    public boolean isTokenExpired<span class="token punctuation">(</span>Date expiration<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> expiration.before<span class="token punctuation">(</span>new Date<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="AccountProfile"><a href="#AccountProfile" class="headerlink" title="AccountProfile"></a>AccountProfile</h1><p>· 包名.shiro.AccountProfile</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@Datapublic class AccountProfile implements Serializable <span class="token punctuation">{</span>    private Long <span class="token function">id</span><span class="token punctuation">;</span>    private String username<span class="token punctuation">;</span>    private String avatar<span class="token punctuation">;</span>    private String email<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>· application.yml(之前已经改了)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">shiro-redis:  enable: <span class="token boolean">true</span>  redis-manager:    host:127.0.0.1:6379<span class="token comment"># 对应Jwt工具类</span>markerhub:  jwt:    <span class="token comment"># 加密密钥</span>    secret: f4e2e52034348f86b67cde581c0f9eb5    <span class="token comment"># token 有效时长，7天，单位：秒</span>    expire: <span class="token number">604800</span>    header: Authorization<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建一个配置文件<br>· 包名/resources/META-INF/spring-devtools.properties</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">restart.include.shiro-redis<span class="token operator">=</span>/shiro-<span class="token punctuation">[</span><span class="token punctuation">\</span><span class="token punctuation">\</span>w-<span class="token punctuation">\</span><span class="token punctuation">\</span>.<span class="token punctuation">]</span>+jar<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="JwtFilter"><a href="#JwtFilter" class="headerlink" title="JwtFilter"></a>JwtFilter</h1><p>这个过滤器是所有链接都需要经过，ShiroConfig有写到，用来校验权限<br>继承的是Shiro内置的AuthenticatingFilter,方法是重写过的<br>1、createToken：生成自定义JwtToken<br>2、onAccessDenied：拦截校验，当头部没有Authorization时候，我们直接通过，不需要自动登录；当带有的时候，首先我们校验jwt的有效性，没问题我们就直接执行executeLogin方法实现自动登录<br>3、onLoginFailure：登录异常时进入，直接将异常信息封装后抛出<br>4、preHandle：拦截器的前置拦截，因为是前后端分析项目，项目中除了需要跨域全局配置之外，我们再拦截器中也需要提供跨域支持。这样，拦截器才不会在进入Controller之前就被限制了。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">import</span> cn.hutool.json.JSONUtil<span class="token punctuation">;</span><span class="token function">import</span> com.baomidou.mybatisplus.core.toolkit.StringUtils<span class="token punctuation">;</span><span class="token function">import</span> com.markerhub.vueblog.common.lang.Result<span class="token punctuation">;</span><span class="token function">import</span> com.markerhub.vueblog.util.JwtUtils<span class="token punctuation">;</span><span class="token function">import</span> io.jsonwebtoken.Claims<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.authc.AuthenticationException<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.authc.AuthenticationToken<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.authc.ExpiredCredentialsException<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.web.filter.authc.AuthenticatingFilter<span class="token punctuation">;</span><span class="token function">import</span> org.apache.shiro.web.util.WebUtils<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.beans.factory.annotation.Autowired<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.stereotype.Component<span class="token punctuation">;</span><span class="token function">import</span> org.springframework.web.bind.annotation.RequestMethod<span class="token punctuation">;</span><span class="token function">import</span> javax.servlet.ServletRequest<span class="token punctuation">;</span><span class="token function">import</span> javax.servlet.ServletResponse<span class="token punctuation">;</span><span class="token function">import</span> javax.servlet.http.HttpServletRequest<span class="token punctuation">;</span><span class="token function">import</span> javax.servlet.http.HttpServletResponse<span class="token punctuation">;</span><span class="token function">import</span> java.io.IOException<span class="token punctuation">;</span>@Componentpublic class JwtFilter extends AuthenticatingFilter <span class="token punctuation">{</span>    @Autowired    JwtUtils jwtUtils<span class="token punctuation">;</span>    @Override    protected AuthenticationToken createToken<span class="token punctuation">(</span>ServletRequest servletRequest, ServletResponse servletResponse<span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>        //获取token        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        String jwt <span class="token operator">=</span> request.getHeader<span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>StringUtils.isEmpty<span class="token punctuation">(</span>jwt<span class="token punctuation">))</span><span class="token punctuation">{</span>            <span class="token builtin class-name">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token builtin class-name">return</span> new JwtToken<span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //对token进行判断    @Override    protected boolean onAccessDenied<span class="token punctuation">(</span>ServletRequest servletRequest, ServletResponse servletResponse<span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>        //获取token        HttpServletRequest request <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletRequest<span class="token punctuation">)</span> servletRequest<span class="token punctuation">;</span>        String jwt <span class="token operator">=</span> request.getHeader<span class="token punctuation">(</span><span class="token string">"Authorization"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        if<span class="token punctuation">(</span>StringUtils.isEmpty<span class="token punctuation">(</span>jwt<span class="token punctuation">))</span><span class="token punctuation">{</span>            <span class="token builtin class-name">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>else<span class="token punctuation">{</span>            //校验jwt            Claims claim <span class="token operator">=</span> jwtUtils.getClaimByToken<span class="token punctuation">(</span>jwt<span class="token punctuation">)</span><span class="token punctuation">;</span>            if<span class="token punctuation">(</span>claim <span class="token operator">==</span> null <span class="token operator">||</span> jwtUtils.isTokenExpired<span class="token punctuation">(</span>claim.getExpiration<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                throw new ExpiredCredentialsException<span class="token punctuation">(</span><span class="token string">"token已失效，请重新登陆"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            //授权登录            <span class="token builtin class-name">return</span> executeLogin<span class="token punctuation">(</span>servletRequest, servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    @Override    protected boolean onLoginFailure<span class="token punctuation">(</span>AuthenticationToken token, AuthenticationException e, ServletRequest request, ServletResponse response<span class="token punctuation">)</span> <span class="token punctuation">{</span>        HttpServletResponse httpServletResponse <span class="token operator">=</span> <span class="token punctuation">(</span>HttpServletResponse<span class="token punctuation">)</span> response<span class="token punctuation">;</span>        Throwable throwable <span class="token operator">=</span> e.getCause<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null ? e <span class="token builtin class-name">:</span> e.getCause<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//获取错误原因        Result result <span class="token operator">=</span> Result.fail<span class="token punctuation">(</span>throwable.getMessage<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        String json <span class="token operator">=</span> JSONUtil.toJsonStr<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            httpServletResponse.getWriter<span class="token punctuation">(</span><span class="token punctuation">)</span>.print<span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>IOException ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token punctuation">}</span>        <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //进过滤器之前，进行的跨域问题    @Override    protected boolean preHandle<span class="token punctuation">(</span>ServletRequest request, ServletResponse response<span class="token punctuation">)</span> throws Exception <span class="token punctuation">{</span>        HttpServletRequest httpServletRequest <span class="token operator">=</span> WebUtils.toHttp<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        HttpServletResponse httpServletResponse <span class="token operator">=</span> WebUtils.toHttp<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>        httpServletResponse.setHeader<span class="token punctuation">(</span><span class="token string">"Access-control-Allow-Origin"</span>, httpServletRequest.getHeader<span class="token punctuation">(</span><span class="token string">"Origin"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        httpServletResponse.setHeader<span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Methods"</span>, <span class="token string">"GET,POST,OPTIONS,PUT,DELETE"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        httpServletResponse.setHeader<span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Headers"</span>, httpServletRequest.getHeader<span class="token punctuation">(</span><span class="token string">"Access-Control-Request-Headers"</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        // 跨域时会首先发送一个OPTIONS请求，这里我们给OPTIONS请求直接返回正常状态        <span class="token keyword">if</span> <span class="token punctuation">(</span>httpServletRequest.getMethod<span class="token punctuation">(</span><span class="token punctuation">)</span>.equals<span class="token punctuation">(</span>RequestMethod.OPTIONS.name<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            httpServletResponse.setStatus<span class="token punctuation">(</span>org.springframework.http.HttpStatus.OK.value<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token builtin class-name">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token builtin class-name">return</span> super.preHandle<span class="token punctuation">(</span>request, response<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里基本搞定。</p>]]></content>
      
      
      <categories>
          
          <category> vueblog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vueblog1.1</title>
      <link href="/2022/09/03/vueblog1.1/"/>
      <url>/2022/09/03/vueblog1.1/</url>
      
        <content type="html"><![CDATA[<p>· 包名.common.lang.Result<br>主要是为了统一下返回的信息格式</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@Datapublic class Result implements Serializable <span class="token punctuation">{</span>    //结果包含的几要素    private int code<span class="token punctuation">;</span>//是否成功，例如200、400    private String msg<span class="token punctuation">;</span>//结果消息    private Object data<span class="token punctuation">;</span>//结果数据    //操作成功类型    public static Result succ<span class="token punctuation">(</span>Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token builtin class-name">return</span> commo<span class="token punctuation">(</span><span class="token number">200</span>,<span class="token string">"操作成功"</span>,data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //操作失败类型    public static Result fail<span class="token punctuation">(</span>String msg<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> commo<span class="token punctuation">(</span><span class="token number">400</span>,msg, null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //操作失败类型    public static Result fail<span class="token punctuation">(</span>String msg,Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> commo<span class="token punctuation">(</span><span class="token number">400</span>, msg, data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //操作失败类型    public static Result fail<span class="token punctuation">(</span>int code,String msg,Object data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> commo<span class="token punctuation">(</span>code, msg, data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //操作类型通用    public static Result commo<span class="token punctuation">(</span>int code,String mess,Object data<span class="token punctuation">)</span><span class="token punctuation">{</span>        Result <span class="token assign-left variable">m</span><span class="token operator">=</span>new Result<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        m.setCode<span class="token punctuation">(</span>code<span class="token punctuation">)</span><span class="token punctuation">;</span>        m.setMsg<span class="token punctuation">(</span>mess<span class="token punctuation">)</span><span class="token punctuation">;</span>        m.setData<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> m<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vueblog </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vueblog1.1</title>
      <link href="/2022/09/01/vueblog1.0/"/>
      <url>/2022/09/01/vueblog1.0/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://juejin.cn/post/6844903823966732302">https://juejin.cn/post/6844903823966732302</a><br>前后端分离，以Springboot为框架基础，数据层用的Mybatis（用了Mybatis-plus），权限用的是shiro，利用jwt作为用户身份凭证。</p><p>事先说明，其实人家的文档也算很清楚，自己就是想拿个项目练练手，记录自己建的过程（对，就是白嫖），然后加上自己能懂的语言，如果其中有一些技术可能要自己去补一下，写博客时实在是觉得有点难以下手，不知道怎么说知识点，而且也比较散。<br>博客代码算完整的，主要是因为有些包怕引用错。</p><p>还有，有些代码其实是可以不用写的，包括一些重写方法之类（靠快捷键或者右键-生成），不过我喜欢弄全代码，所以这一点可能就不太重要了。</p><h1 id="搭建后端环境（IDEA2021，eclipse估计也行，想着IDEA方便点）"><a href="#搭建后端环境（IDEA2021，eclipse估计也行，想着IDEA方便点）" class="headerlink" title="搭建后端环境（IDEA2021，eclipse估计也行，想着IDEA方便点）"></a>搭建后端环境（IDEA2021，eclipse估计也行，想着IDEA方便点）</h1><h2 id="新建Springboot项目"><a href="#新建Springboot项目" class="headerlink" title="新建Springboot项目"></a>新建Springboot项目</h2><p>项目随便<br>包名(也就是软件包名称）尽可能简单点<br>不知道选什么工具，直接复制下面的依赖，这是后端都会用到的。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span>dependencies<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring-boot-starter-web<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring-boot-devtools<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>scope<span class="token operator">&gt;</span>runtime<span class="token operator">&lt;</span>/scope<span class="token operator">&gt;</span><span class="token operator">&lt;</span>optional<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/optional<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>mysql<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>mysql-connector-java<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>scope<span class="token operator">&gt;</span>runtime<span class="token operator">&lt;</span>/scope<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.projectlombok<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>lombok<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>optional<span class="token operator">&gt;</span>true<span class="token operator">&lt;</span>/optional<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- 手动添加         --<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring-boot-starter-validation<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring-boot-starter-test<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>scope<span class="token operator">&gt;</span>test<span class="token operator">&lt;</span>/scope<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>--mp--<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>com.baomidou<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>mybatis-plus-boot-starter<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">3.2</span>.<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/version<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring-boot-starter-freemarker<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>--mp代码生成器--<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>com.baomidou<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>mybatis-plus-generator<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">3.2</span>.<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/version<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.crazycake<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>shiro-redis-spring-boot-starter<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">3.2</span>.<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/version<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- hutool工具类--<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>cn.hutool<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>hutool-all<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">5.3</span>.<span class="token operator"><span class="token file-descriptor important">3</span>&lt;</span>/version<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span><span class="token operator">!</span>-- jwt --<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>io.jsonwebtoken<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>jjwt<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span>            <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">0.9</span>.<span class="token operator"><span class="token file-descriptor important">1</span>&lt;</span>/version<span class="token operator">&gt;</span>        <span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependencies<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="整合mybatis-plus"><a href="#整合mybatis-plus" class="headerlink" title="整合mybatis plus"></a>整合mybatis plus</h2><p>主要是为了直接生成mybatis的相关文件，包括mapper还有一系列软件包<br>官网：<a href="https://baomidou.com/">https://baomidou.com/</a></p><h3 id="导入jar"><a href="#导入jar" class="headerlink" title="导入jar"></a>导入jar</h3><h4 id="导包"><a href="#导包" class="headerlink" title="导包"></a>导包</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token operator">&lt;</span><span class="token operator">!</span>--mp--<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>com.baomidou<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>mybatis-plus-boot-starter<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">3.2</span>.<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/version<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>org.springframework.boot<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>spring-boot-starter-freemarker<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>mysql<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>mysql-connector-java<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>scope<span class="token operator">&gt;</span>runtime<span class="token operator">&lt;</span>/scope<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">!</span>--mp代码生成器--<span class="token operator">&gt;</span><span class="token operator">&lt;</span>dependency<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>groupId<span class="token operator">&gt;</span>com.baomidou<span class="token operator">&lt;</span>/groupId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">&gt;</span>mybatis-plus-generator<span class="token operator">&lt;</span>/artifactId<span class="token operator">&gt;</span>    <span class="token operator">&lt;</span>version<span class="token operator">&gt;</span><span class="token number">3.2</span>.<span class="token operator"><span class="token file-descriptor important">0</span>&lt;</span>/version<span class="token operator">&gt;</span><span class="token operator">&lt;</span>/dependency<span class="token operator">&gt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="配置文件-application-yml（对了，改一下配置文件后缀，-yml好用点）"><a href="#配置文件-application-yml（对了，改一下配置文件后缀，-yml好用点）" class="headerlink" title="配置文件 application.yml（对了，改一下配置文件后缀，.yml好用点）"></a>配置文件 application.yml（对了，改一下配置文件后缀，.yml好用点）</h5><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># DataSource Config</span>spring:  datasource:    driver-class-name: com.mysql.cj.jdbc.Driver    url: jdbc:mysql://localhost:3306/vueblog?useUnicode<span class="token operator">=</span>true<span class="token operator">&amp;</span><span class="token assign-left variable">useSSL</span><span class="token operator">=</span>false<span class="token operator">&amp;</span><span class="token assign-left variable">characterEncoding</span><span class="token operator">=</span>utf8<span class="token operator">&amp;</span><span class="token assign-left variable">serverTimezone</span><span class="token operator">=</span>Asia/Shanghai    username: root    password: adminmybatis-plus:  mapper-locations: classpath*:/mapper/**Mapper.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面是数据库的信息还有mybatis plus的mapper的xml文件的扫描路径。</p><h4 id="开启，apper接口扫描、添加分页插件"><a href="#开启，apper接口扫描、添加分页插件" class="headerlink" title="开启，apper接口扫描、添加分页插件"></a>开启，apper接口扫描、添加分页插件</h4><p>· 路径：包名.config.MybatisPlusConfig</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@Configuration@EnableTransactionManagement@MapperScan<span class="token punctuation">(</span><span class="token string">"xxxx.mapper"</span><span class="token punctuation">)</span>//xxx填软件包名称public class MybatisPlusConfig <span class="token punctuation">{</span>    @Bean    public PaginationInterceptor <span class="token function-name function">paginationInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        PaginationInterceptor paginationInterceptor <span class="token operator">=</span> new PaginationInterceptor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> paginationInterceptor<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="代码生成"><a href="#代码生成" class="headerlink" title="代码生成"></a>代码生成</h4><p>官网有代码，我推荐用旧的，主要是容易，新的也可以，主要是旧的容易，就是容易（主要是我笨）。<br>主要是直接根据数据库信息生成entity、service、mapper等接口和实现类。<br>· 包名.CodeGenerator</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">public class CodeGenerator <span class="token punctuation">{</span>    /**     * <span class="token operator">&lt;</span>p<span class="token operator">&gt;</span>     * 读取控制台内容     * <span class="token operator">&lt;</span>/p<span class="token operator">&gt;</span>     */    public static String scanner<span class="token punctuation">(</span>String tip<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner scanner <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        StringBuilder <span class="token builtin class-name">help</span> <span class="token operator">=</span> new StringBuilder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        help.append<span class="token punctuation">(</span><span class="token string">"请输入"</span> + tip + <span class="token string">"："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>help.toString<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>scanner.hasNext<span class="token punctuation">(</span><span class="token punctuation">))</span> <span class="token punctuation">{</span>            String ipt <span class="token operator">=</span> scanner.next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>StringUtils.isNotEmpty<span class="token punctuation">(</span>ipt<span class="token punctuation">))</span> <span class="token punctuation">{</span>                <span class="token builtin class-name">return</span> ipt<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        throw new MybatisPlusException<span class="token punctuation">(</span><span class="token string">"请输入正确的"</span> + tip + <span class="token string">"！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        // 代码生成器        AutoGenerator mpg <span class="token operator">=</span> new AutoGenerator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        // 全局配置        GlobalConfig gc <span class="token operator">=</span> new GlobalConfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String projectPath <span class="token operator">=</span> System.getProperty<span class="token punctuation">(</span><span class="token string">"user.dir"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc.setOutputDir<span class="token punctuation">(</span>projectPath + <span class="token string">"/src/main/java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        // gc.setOutputDir<span class="token punctuation">(</span><span class="token string">"D:<span class="token entity" title="\\">\\</span>test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc.setAuthor<span class="token punctuation">(</span><span class="token string">"local"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        gc.setOpen<span class="token punctuation">(</span>false<span class="token punctuation">)</span><span class="token punctuation">;</span>        // gc.setSwagger2<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span> 实体属性 Swagger2 注解        gc.setServiceName<span class="token punctuation">(</span><span class="token string">"%sService"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg.setGlobalConfig<span class="token punctuation">(</span>gc<span class="token punctuation">)</span><span class="token punctuation">;</span>        // 数据源配置 数据库名 账号密码        DataSourceConfig dsc <span class="token operator">=</span> new DataSourceConfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc.setUrl<span class="token punctuation">(</span><span class="token string">"jdbc:mysql://localhost:3306/xxxx?useUnicode=true&amp;useSSL=false&amp;characterEncoding=utf8&amp;serverTimezone=UTC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//xxx是数据库名        // dsc.setSchemaName<span class="token punctuation">(</span><span class="token string">"public"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc.setDriverName<span class="token punctuation">(</span><span class="token string">"com.mysql.cj.jdbc.Driver"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dsc.setUsername<span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//数据库用户名        dsc.setPassword<span class="token punctuation">(</span><span class="token string">"xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//数据库密码        mpg.setDataSource<span class="token punctuation">(</span>dsc<span class="token punctuation">)</span><span class="token punctuation">;</span>        // 包配置        PackageConfig pc <span class="token operator">=</span> new PackageConfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pc.setModuleName<span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        pc.setParent<span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//包名        mpg.setPackageInfo<span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span>        // 自定义配置        InjectionConfig cfg <span class="token operator">=</span> new <span class="token function-name function">InjectionConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            @Override            public void <span class="token function-name function">initMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                // to <span class="token keyword">do</span> nothing            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        // 如果模板引擎是 freemarker        String templatePath <span class="token operator">=</span> <span class="token string">"/templates/mapper.xml.ftl"</span><span class="token punctuation">;</span>        // 如果模板引擎是 velocity        // String templatePath <span class="token operator">=</span> <span class="token string">"/templates/mapper.xml.vm"</span><span class="token punctuation">;</span>        // 自定义输出配置        List<span class="token operator">&lt;</span>FileOutConfig<span class="token operator">&gt;</span> focList <span class="token operator">=</span> new ArrayList<span class="token operator">&lt;&gt;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        // 自定义配置会被优先输出        focList.add<span class="token punctuation">(</span>new FileOutConfig<span class="token punctuation">(</span>templatePath<span class="token punctuation">)</span> <span class="token punctuation">{</span>            @Override            public String outputFile<span class="token punctuation">(</span>TableInfo tableInfo<span class="token punctuation">)</span> <span class="token punctuation">{</span>                // 自定义输出文件名 ， 如果你 Entity 设置了前后缀、此处注意 xml 的名称会跟着发生变化！                <span class="token builtin class-name">return</span> projectPath + <span class="token string">"/src/main/resources/mapper/"</span>                        + <span class="token string">"/"</span> + tableInfo.getEntityName<span class="token punctuation">(</span><span class="token punctuation">)</span> + <span class="token string">"Mapper"</span> + StringPool.DOT_XML<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cfg.setFileOutConfigList<span class="token punctuation">(</span>focList<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg.setCfg<span class="token punctuation">(</span>cfg<span class="token punctuation">)</span><span class="token punctuation">;</span>        // 配置模板        TemplateConfig templateConfig <span class="token operator">=</span> new TemplateConfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        templateConfig.setXml<span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg.setTemplate<span class="token punctuation">(</span>templateConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>        // 策略配置        StrategyConfig strategy <span class="token operator">=</span> new StrategyConfig<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy.setNaming<span class="token punctuation">(</span>NamingStrategy.underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy.setColumnNaming<span class="token punctuation">(</span>NamingStrategy.underline_to_camel<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy.setEntityLombokModel<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy.setRestControllerStyle<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy.setInclude<span class="token punctuation">(</span>scanner<span class="token punctuation">(</span><span class="token string">"表名，多个英文逗号分割"</span><span class="token punctuation">)</span>.split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        strategy.setControllerMappingHyphenStyle<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">;</span>        strategy.setTablePrefix<span class="token punctuation">(</span><span class="token string">"m_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg.setStrategy<span class="token punctuation">(</span>strategy<span class="token punctuation">)</span><span class="token punctuation">;</span>        mpg.setTemplateEngine<span class="token punctuation">(</span>new FreemarkerTemplateEngine<span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>        mpg.execute<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对了，还有数据库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">SET <span class="token assign-left variable">FOREIGN_KEY_CHECKS</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>-- ------------------------------ Table structure <span class="token keyword">for</span> m_blog-- ----------------------------DROP TABLE IF EXISTS <span class="token variable"><span class="token variable">`</span>m_blog<span class="token variable">`</span></span><span class="token punctuation">;</span>CREATE TABLE <span class="token variable"><span class="token variable">`</span>m_blog<span class="token variable">`</span></span> <span class="token punctuation">(</span>  <span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span> bigint<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT,  <span class="token variable"><span class="token variable">`</span>user_id<span class="token variable">`</span></span> bigint<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL,  <span class="token variable"><span class="token variable">`</span>title<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> NOT NULL,  <span class="token variable"><span class="token variable">`</span>description<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> NOT NULL,  <span class="token variable"><span class="token variable">`</span>content<span class="token variable">`</span></span> longtext,  <span class="token variable"><span class="token variable">`</span>created<span class="token variable">`</span></span> datetime NOT NULL ON UPDATE CURRENT_TIMESTAMP,  <span class="token variable"><span class="token variable">`</span>status<span class="token variable">`</span></span> tinyint<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> DEFAULT NULL,  PRIMARY KEY <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token assign-left variable">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token assign-left variable">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">15</span> DEFAULT <span class="token assign-left variable">CHARSET</span><span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span>-- ------------------------------ Records of m_blog-- ----------------------------INSERT INTO <span class="token variable"><span class="token variable">`</span>m_blog<span class="token variable">`</span></span> VALUES <span class="token punctuation">(</span><span class="token string">'1'</span>, <span class="token string">'1'</span>, <span class="token string">'生活就像海洋，只有意志坚强的人才能到达彼岸'</span>, <span class="token string">'这里是摘要哈哈哈'</span>, <span class="token string">'内容？？？'</span>, <span class="token string">'2020-05-21 22:08:42'</span>, <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>INSERT INTO <span class="token variable"><span class="token variable">`</span>m_blog<span class="token variable">`</span></span> VALUES <span class="token punctuation">(</span><span class="token string">'2'</span>, <span class="token string">'1'</span>, <span class="token string">'最值得学习的博客项目eblog'</span>, <span class="token string">'eblog是一个基于Springboot2.1.2开发的博客学习项目，为了让项目融合更多的知识点，达到学习目的，编写了详细的从0到1开发文档。主要学习包括：自定义Freemarker标签，使用shiro+redis完成了会话共享，redis的zset结构完成本周热议排行榜，t-io+websocket完成即时消息通知和群聊，rabbitmq+elasticsearch完成博客内容搜索引擎等。值得学习的地方很多！'</span>, <span class="token string">'**推荐阅读：**\r\n\r\n[分享一套SpringBoot开发博客系统源码，以及完整开发文档！速度保存！](https://mp.weixin.qq.com/s/jz6e977xP-OyaAKNjNca8w)\r\n\r\n[Github上最值得学习的100个Java开源项目，涵盖各种技术栈！](https://mp.weixin.qq.com/s/N-U0TaEUXnBFfBsmt_OESQ)\r\n\r\n[2020年最新的常问企业面试题大全以及答案](https://mp.weixin.qq.com/s/lR5LC5GnD2Gs59ecV5R0XA)'</span>, <span class="token string">'2020-05-28 09:36:38'</span>, <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>INSERT INTO <span class="token variable"><span class="token variable">`</span>m_blog<span class="token variable">`</span></span> VALUES <span class="token punctuation">(</span><span class="token string">'3'</span>, <span class="token string">'1'</span>, <span class="token string">'关注公众号JavaCat，回复xshell或navicat获取破解对应工具'</span>, <span class="token string">'视频中所用到的xshell和navicat直接获取哈！'</span>, <span class="token string">'### 工具获取\r\n\r\n* xshell 6 绿色破解版：关注公众号：JavaCat，回复 xshell 获取\r\n* Navicat 11 简体中文版：关注公众号：JavaCat，回复 navicat 获取\r\n\r\n公众号二维码：\r\n\r\n![JavaCat](//image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20201020/7fa16a1f957f4cfebe7be1f6675f6f36.png \"JavaCat\")\r\n\r\n直接扫码回复对应关键字\r\n\r\n**推荐阅读：**\r\n\r\n[B站86K播放量，SpringBoot+Vue前后端分离完整入门教程！](https://mp.weixin.qq.com/s/jGEkHTf2X8l-wUenc-PpEw)\r\n\r\n[分享一套SpringBoot开发博客系统源码，以及完整开发文档！速度保存！](https://mp.weixin.qq.com/s/jz6e977xP-OyaAKNjNca8w)\r\n\r\n[Github上最值得学习的100个Java开源项目，涵盖各种技术栈！](https://mp.weixin.qq.com/s/N-U0TaEUXnBFfBsmt_OESQ)\r\n\r\n[2020年最新的常问企业面试题大全以及答案](https://mp.weixin.qq.com/s/lR5LC5GnD2Gs59ecV5R0XA)'</span>, <span class="token string">'2020-10-20 05:05:31'</span>, <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>INSERT INTO <span class="token variable"><span class="token variable">`</span>m_blog<span class="token variable">`</span></span> VALUES <span class="token punctuation">(</span><span class="token string">'7'</span>, <span class="token string">'1'</span>, <span class="token string">'你真的会写单例模式吗?'</span>, <span class="token string">'单例模式可能是代码最少的模式了，但是少不一定意味着简单，想要用好、用对单例模式，还真得费一番脑筋。本文对 Java 中常见的单例模式写法做了一个总结，如有错漏之处，恳请读者指正。'</span>, <span class="token string">'&gt; 作者：吃桔子的攻城狮 来源：http://www.tekbroaden.com/singleton-java.html\n\n\n单例模式可能是代码最少的模式了，但是少不一定意味着简单，想要用好、用对单例模式，还真得费一番脑筋。本文对 Java 中常见的单例模式写法做了一个总结，如有错漏之处，恳请读者指正。\n\n饿汉法\n===\n\n顾名思义，饿汉法就是在第一次引用该类的时候就创建对象实例，而不管实际是否需要创建。代码如下：\n\n```\npublic class Singleton {  \n    private static Singleton = new Singleton();\n    private Singleton() {}\n    public static getSignleton(){\n        return singleton;\n    }\n}\n\n```\n\n这样做的好处是编写简单，但是无法做到延迟创建对象。但是我们很多时候都希望对象可以尽可能地延迟加载，从而减小负载，所以就需要下面的懒汉法：\n'</span>, <span class="token string">'2020-05-22 00:42:44'</span>, <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>INSERT INTO <span class="token variable"><span class="token variable">`</span>m_blog<span class="token variable">`</span></span> VALUES <span class="token punctuation">(</span><span class="token string">'9'</span>, <span class="token string">'1'</span>, <span class="token string">'真正理解Mysql的四种隔离级别@'</span>, <span class="token string">'事务是应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤消。也就是事务具有原子性，一个事务中的一系列的操作要么全部成功，要么一个都不做。\n\n事务的结束有两种，当事务中的所以步骤全部成功执行时，事务提交。如果其中一个步骤失败，将发生回滚操作，撤消撤消之前到事务开始时的所以操作。'</span>, <span class="token string">'### 什么是事务  \n\n&gt; 事务是应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤消。也就是事务具有原子性，一个事务中的一系列的操作要么全部成功，要么一个都不做。\n&gt; \n&gt; 事务的结束有两种，当事务中的所以步骤全部成功执行时，事务提交。如果其中一个步骤失败，将发生回滚操作，撤消撤消之前到事务开始时的所以操作。\n\n**事务的 ACID**\n\n事务具有四个特征：原子性（ Atomicity ）、一致性（ Consistency ）、隔离性（ Isolation ）和持续性（ Durability ）。这四个特性简称为 ACID 特性。\n\n&gt; 1 、原子性。事务是数据库的逻辑工作单位，事务中包含的各操作要么都做，要么都不做\n&gt; \n&gt; 2 、一致性。事 务执行的结果必须是使数据库从一个一致性状态变到另一个一致性状态。因此当数据库只包含成功事务提交的结果时，就说数据库处于一致性状态。如果数据库系统 运行中发生故障，有些事务尚未完成就被迫中断，这些未完成事务对数据库所做的修改有一部分已写入物理数据库，这时数据库就处于一种不正确的状态，或者说是 不一致的状态。'</span>, <span class="token string">'2020-05-22 22:04:46'</span>, <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>INSERT INTO <span class="token variable"><span class="token variable">`</span>m_blog<span class="token variable">`</span></span> VALUES <span class="token punctuation">(</span><span class="token string">'10'</span>, <span class="token string">'1'</span>, <span class="token string">'博客项目eblog讲解视频上线啦，长达17个小时！！'</span>, <span class="token string">'1. 慕课网免费资源好久都没更新了，新教程大都付费\n2. B站上的视频繁多，通过收藏和弹幕数量通常很容易判断出视频是否优质\n3. 讲真，B站的弹幕文化，让我觉得，我不是一个在学习，自古人才出评论。哈哈哈\n4. B站视频通常广告少，up主的用心录制，通常只为了你关注他'</span>, <span class="token string">'ok，再回到我们的eblog项目，源码、文档、视频我都开源出来了。来些基本操作：github上给个star，B站视频给个三连支持咧。\n\neblog源码：https://github.com/MarkerHub/eblog\n\n点击这里：[10+篇完整开发文档](https://mp.weixin.qq.com/mp/homepage?__biz=MzIwODkzOTc1MQ==&amp;hid=1&amp;sn=8e512316c3dfe140e636d0c996951166)\n\n![](//image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20200508/c290d945b7d24c79b172759bdb5b94e0.png)\n\n视频讲解：（记得关注我噢！）\n\nhttps://www.bilibili.com/video/BV1ri4y1x71A\n\n![](//image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/20200508/983b5abc1c934360a1a1362347a275f7.png)\n\n项目其实还很多bug的，哈哈，我还需要进行二次迭代，到时候再发迭代文档出来。\n\n关注下我的B站，作为一个自媒体的自由职业者，没有什么比涨粉更让我开心的了，嘻嘻。\n\n近期即将推出的视频教程：\n\n1. 搭建脚手架，前后端分离首秀\n2. Shiro入门到精通教程\n3. SpringBoot2.2.6最新入门教程'</span>, <span class="token string">'2020-05-22 22:05:49'</span>, <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>-- ------------------------------ Table structure <span class="token keyword">for</span> m_user-- ----------------------------DROP TABLE IF EXISTS <span class="token variable"><span class="token variable">`</span>m_user<span class="token variable">`</span></span><span class="token punctuation">;</span>CREATE TABLE <span class="token variable"><span class="token variable">`</span>m_user<span class="token variable">`</span></span> <span class="token punctuation">(</span>  <span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span> bigint<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> NOT NULL AUTO_INCREMENT,  <span class="token variable"><span class="token variable">`</span>username<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> DEFAULT NULL,  <span class="token variable"><span class="token variable">`</span>avatar<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> DEFAULT NULL,  <span class="token variable"><span class="token variable">`</span>email<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> DEFAULT NULL,  <span class="token variable"><span class="token variable">`</span>password<span class="token variable">`</span></span> varchar<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> DEFAULT NULL,  <span class="token variable"><span class="token variable">`</span>status<span class="token variable">`</span></span> int<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span> NOT NULL,  <span class="token variable"><span class="token variable">`</span>created<span class="token variable">`</span></span> datetime DEFAULT NULL,  <span class="token variable"><span class="token variable">`</span>last_login<span class="token variable">`</span></span> datetime DEFAULT NULL,  PRIMARY KEY <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span><span class="token function">id</span><span class="token variable">`</span></span><span class="token punctuation">)</span>,  KEY <span class="token variable"><span class="token variable">`</span>UK_USERNAME<span class="token variable">`</span></span> <span class="token punctuation">(</span><span class="token variable"><span class="token variable">`</span>username<span class="token variable">`</span></span><span class="token punctuation">)</span> USING BTREE<span class="token punctuation">)</span> <span class="token assign-left variable">ENGINE</span><span class="token operator">=</span>InnoDB <span class="token assign-left variable">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> DEFAULT <span class="token assign-left variable">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span>-- ------------------------------ Records of m_user-- ----------------------------INSERT INTO <span class="token variable"><span class="token variable">`</span>m_user<span class="token variable">`</span></span> VALUES <span class="token punctuation">(</span><span class="token string">'1'</span>, <span class="token string">'markerhub'</span>, <span class="token string">'https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/5a9f48118166308daba8b6da7e466aab.jpg'</span>, null, <span class="token string">'96e79218965eb72c92a549dd5a330112'</span>, <span class="token string">'0'</span>, <span class="token string">'2020-04-20 10:44:01'</span>, null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行CodeGenerator的main方法，出现输入表名后，生成结果（就是一堆软件包，如果放错位置，修改一下包名）</p><p>测试：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">@RestController@RequestMapping<span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>public class UserController <span class="token punctuation">{</span>    @Autowired    UserService userService<span class="token punctuation">;</span>    @GetMapping<span class="token punctuation">(</span><span class="token string">"/{id}"</span><span class="token punctuation">)</span>    public Object test<span class="token punctuation">(</span>@PathVariable<span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span> Long <span class="token function">id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token builtin class-name">return</span> userService.getById<span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vueblog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mybatis plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vueblog2.0</title>
      <link href="/2022/09/01/vueblog2.0/"/>
      <url>/2022/09/01/vueblog2.0/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://juejin.cn/post/6844903823966732302">https://juejin.cn/post/6844903823966732302</a></p><p>事先说明，其实人家的文档也算很清楚，自己就是想拿个项目练练手，记录自己建的过程（对，就是白嫖），然后加上自己能懂的语言，如果其中有一些技术可能要自己去补一下，写博客时实在是觉得有点难以下手，不知道怎么说知识点，而且也比较散。</p><p>因为自己本身接触后端比较多，所以前端没有后端那么熟练，因此出错也比较多，文章也只是根据参考链接和视频去说一下自己解决的问题和看法，不会的看一下参考链接或者百度。</p><p>这个项目也算是比较旧了，没用一些比较创新的组件，可能更适合新学的吧。</p><p>前端的话，建议可以跟着参考链接的视频学，或者先将页面的一些组件写好，然后再看一下script里的方法，有console.log的地方没有后面的代码都可以直接运行，可以尝试看一下方法到底做了什么，如果不行，先看前面有没有打错，然后再看方法有没有错</p><p>前端代码全程vue2，代码是跟着视频，人家在自己的github也有代码，这里只是为了自己方便而已。</p><hr><p>可能会使用的到技术如下：</p><p>vue<br>element-ui<br>axios<br>mavon-editor<br>markdown-it<br>github-markdown-css</p><h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><h2 id="下node-js和npm。最新的就可以，可以直接百度"><a href="#下node-js和npm。最新的就可以，可以直接百度" class="headerlink" title="下node.js和npm。最新的就可以，可以直接百度"></a>下node.js和npm。最新的就可以，可以直接百度</h2><p>然后安装vue环境，也是直接百度，包括下载淘宝npm，vue的话下最新的，可以打开vue ui的（主要是新建项目看的明白简单点），整个项目是用vue2的，之后在vue ui新建项目可以换vue2</p><h2 id="创建vue项目"><a href="#创建vue项目" class="headerlink" title="创建vue项目"></a>创建vue项目</h2><p>1、打开vue ui，换到【创建】，注意创建的目录最好是和你运行vue ui同一级。（也就是说在你想创建项目的地方打开vue ui就可以）</p><p>2、项目文件夹中输入项目名称“vueblog-vue”，其他不用改，点击下一步，选择【手动】，再点击下一步，勾选上路由Router、状态管理Vuex，去掉js的校验，其他不用选</p><p>3、也选上【Use history mode for router】，点击创建项目，然后弹窗中选择按钮【创建项目，不保存预设】，就进入项目创建啦。</p><h2 id="安装element-ui"><a href="#安装element-ui" class="headerlink" title="安装element-ui"></a>安装element-ui</h2><pre class="line-numbers language-none"><code class="language-none"># 切换到项目根目录cd vueblog-vue# 安装element-uinpm install element-ui --save<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后打开项目src目录下的main.js，引入element-ui依赖。</p><pre class="line-numbers language-none"><code class="language-none">import Element from 'element-ui'import "element-ui/lib/theme-chalk/index.css"Vue.use(Element)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="安装axios"><a href="#安装axios" class="headerlink" title="安装axios"></a>安装axios</h2><p>一个基于 promise 的 HTTP 库，这样我们进行前后端对接的时候，使用这个工具可以提高我们的开发效率。</p><pre class="line-numbers language-none"><code class="language-none">npm install axios --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>main.js引入</p><pre class="line-numbers language-none"><code class="language-none">import axios from 'axios'Vue.prototype.$axios = axios //<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>之后组件中，我们就可以通过this.$axios.get()来发起我们的请求了。</p>]]></content>
      
      
      <categories>
          
          <category> vueblog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vueblog2.1</title>
      <link href="/2022/09/01/vueblog2.1/"/>
      <url>/2022/09/01/vueblog2.1/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://juejin.cn/post/6844903823966732302">https://juejin.cn/post/6844903823966732302</a></p><p>事先说明，其实人家的文档也算很清楚，自己就是想拿个项目练练手，记录自己建的过程（对，就是白嫖），然后加上自己能懂的语言，如果其中有一些技术可能要自己去补一下，写博客时实在是觉得有点难以下手，不知道怎么说知识点，而且也比较散。</p><p>因为自己本身接触后端比较多，所以前端没有后端那么熟练，因此出错也比较多，文章也只是根据参考链接和视频去说一下自己解决的问题和看法，不会的看一下参考链接或者百度。</p><p>这个项目也算是比较旧了，没用一些比较创新的组件，可能更适合新学的吧。</p><hr><h1 id="创建页面"><a href="#创建页面" class="headerlink" title="创建页面"></a>创建页面</h1><p>在views文件夹下定义几个页面：</p><p>BlogDetail.vue（博客详情页）<br>BlogEdit.vue（编辑博客）<br>Blogs.vue（博客列表）<br>Login.vue（登录页面）</p><p>然后路由中心配置：</p><p>router\index.js</p><pre class="line-numbers language-none"><code class="language-none">import Vue from 'vue'import VueRouter from 'vue-router'import Login from '../views/Login.vue'import Blogs from '@/views/Blogs'import BlogEdit from '../views/BlogEdit.vue'import BlogDetail from '../views/BlogDetail.vue'Vue.use(VueRouter)const routes = [  {    path: '/',    name: 'Index',    redirect: {name: 'Blogs'}  },  {    path: '/blogs',    name: 'Blogs',    //懒加载    // component: () =&gt; import('../views/Blogs.vue')    component: Blogs  },  {    path: '/login',    name: 'Login',    component: Login  },  {    path: '/blog/add',    name: 'BlogAdd',    component: BlogEdit,    meta: {      requireAuth: true    }  },  {    path: '/blog/:blogId',    name: 'BlogDetail',    component: BlogDetail  },  {    path: '/blog/:blogId/edit',    name: 'BlogEdit',    component: BlogEdit,    meta: {      requireAuth: true    }  }]const router = new VueRouter({  mode: 'history',  base: process.env.BASE_URL,  routes})export default router<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> vueblog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vueblog2.2</title>
      <link href="/2022/09/01/vueblog2.2/"/>
      <url>/2022/09/01/vueblog2.2/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://juejin.cn/post/6844903823966732302">https://juejin.cn/post/6844903823966732302</a></p><p>事先说明，其实人家的文档也算很清楚，自己就是想拿个项目练练手，记录自己建的过程（对，就是白嫖），然后加上自己能懂的语言，如果其中有一些技术可能要自己去补一下，写博客时实在是觉得有点难以下手，不知道怎么说知识点，而且也比较散。</p><p>因为自己本身接触后端比较多，所以前端没有后端那么熟练，因此出错也比较多，文章也只是根据参考链接和视频去说一下自己解决的问题和看法，不会的看一下参考链接或者百度。</p><p>这个项目也算是比较旧了，没用一些比较创新的组件，可能更适合新学的吧。</p><hr><p>先说一下，正式的功能页面调试的时候，建议后端那写清楚server的端口号，vue启动默认是8080（我也不知道为什么，自己比较懒，也没去深究），然后必须先开后端，要不然数据没办法获取，而且建议先开后端，再开前端，这样，或许你出错少一点，高手请随意（不过高手也不会看这我写的这些破东西）</p><h1 id="登陆页面"><a href="#登陆页面" class="headerlink" title="登陆页面"></a>登陆页面</h1><p>直接上代码，输入框和按钮可以去element-ui官网去找,那个图片的话可能需要自己做个图床或者直接用参考链接那个</p><p>页面做了两件事，表单检验和登录按钮的点击登录事件</p><p>表单校验规则查一下element-ui的组件就知道了；<br>至于登录按钮的点击登录事件，</p><pre class="line-numbers language-none"><code class="language-none">this.$axios.post('/login',this.ruleForm).then(res =&gt; {                        console.log(res.headers);            console.log(res);            const jwt = res.headers['authorization'];            const userInfo = res.data.data;            console.log(userInfo);            //把数据共享出去            _this.$store.commit("SET_TOKEN",jwt);            _this.$store.commit("SET_USERINFO",userInfo);            //获取            console.log(_this.$store.getters.getUser);            _this.$router.push("/blogs")          })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从返回的结果请求头中获取到token的信息，然后使用store提交token和用户信息的状态。完成操作之后，调整到了/blogs路由，即博客列表页面。<br>console.log主要是看有没有获取到信息，可以不写。</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;el-container&gt;            &lt;el-main&gt;        &lt;el-header&gt;        &lt;img class="mlogo" src="https://cdn.staticaly.com/gh/feadechou/img-bed@main/avataaars.6ooctx7djqw0.webp" alt=""&gt;      &lt;/el-header&gt;        &lt;el-form :model="ruleForm" :rules="rules" ref="ruleForm" label-width="100px" class="demo-ruleForm"&gt;          &lt;el-form-item label="用户名" prop="username"&gt;            &lt;el-input v-model="ruleForm.username"&gt;&lt;/el-input&gt;          &lt;/el-form-item&gt;          &lt;el-form-item label="密码" prop="password"&gt;            &lt;el-input type="password" v-model="ruleForm.password"&gt;&lt;/el-input&gt;          &lt;/el-form-item&gt;          &lt;el-form-item&gt;            &lt;el-button type="primary" @click="submitForm('ruleForm')"&gt;立即创建&lt;/el-button&gt;            &lt;el-button @click="resetForm('ruleForm')"&gt;重置&lt;/el-button&gt;          &lt;/el-form-item&gt;        &lt;/el-form&gt;      &lt;/el-main&gt;    &lt;/el-container&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;export default {  name: "Login",  data() {    return {      ruleForm: {        username: "markerhub",        password: "111111"      },      rules: {        username: [          { required: true, message: "请输入用户名", trigger: "blur" },          { min: 3, max: 15, message: "长度在 3 到 15 个字符", trigger: "blur" },        ],        password: [          { required: true, message: "请输入密码", trigger: "change" },        ],      },    };  },  methods: {    submitForm(formName) {      this.$refs[formName].validate((valid) =&gt; {        if (valid) {          // alert("submit!");          const _this = this;//全局地址          //login:http://localhost:8081/login 后端地址          this.$axios.post('/login',this.ruleForm).then(res =&gt; {                        console.log(res.headers);            console.log(res);            const jwt = res.headers['authorization'];            const userInfo = res.data.data;            console.log(userInfo);            //把数据共享出去            _this.$store.commit("SET_TOKEN",jwt);            _this.$store.commit("SET_USERINFO",userInfo);            //获取            console.log(_this.$store.getters.getUser);            _this.$router.push("/blogs")          })        } else {          console.log("error submit!!");          return false;        }      });    },    resetForm(formName) {      this.$refs[formName].resetFields();    },  },};&lt;/script&gt;&lt;style scope&gt;.el-header,.el-footer {  background-color: #b3c0d1;  color: #333;  text-align: center;  line-height: 60px;}.el-aside {  background-color: #d3dce6;  color: #333;  text-align: center;  line-height: 200px;}.el-main {  background-color: #e9eef3;  color: #333;  text-align: center;  line-height: 160px;}body&gt;.el-container {  margin-bottom: 40px;}.el-container:nth-child(5) .el-aside,.el-container:nth-child(6) .el-aside {  line-height: 260px;}.el-container:nth-child(7) .el-aside {  line-height: 320px;}.demo-ruleForm {  max-width: 500px;  margin: 0 auto;}.mlogo {    height: 60%;    margin-top: 10px;  }&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="token的状态同步"><a href="#token的状态同步" class="headerlink" title="token的状态同步"></a>token的状态同步</h1><p>· store/index.js</p><pre class="line-numbers language-none"><code class="language-none">import Vue from 'vue'import Vuex from 'vuex'Vue.use(Vuex)//数据状态管理,数据互通export default new Vuex.Store({  state: {    token: '',    userInfo: JSON.parse(sessionStorage.getItem("userInfo"))  },  getters: {    //getter    getUser: state =&gt; {      return state.userInfo;    }  },  mutations: {    //setter    SET_TOKEN: (state,token) =&gt; {      state.token = token      localStorage.setItem("token",token)    },    SET_USERINFO: (state,userInfo) =&gt; {      state.userInfo = userInfo      sessionStorage.setItem("userInfo",JSON.stringify(userInfo))    },    REMOVE_INFO: (state) =&gt; {      state.token = ''      state.userInfo = {}      localStorage.removeItem("token")      sessionStorage.removeItem("userInfo")      // localStorage.setItem("token",'')      // sessionStorage.setItem("userInfo",JSON.stringify(''))    }  },  actions: {  },  modules: {  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>存储token，我们用的是localStorage，存储用户信息，我们用的是sessionStorage。毕竟用户信息我们不需要长久保存，保存了token信息，我们随时都可以初始化用户信息。</p><h1 id="定义全局axios拦截器"><a href="#定义全局axios拦截器" class="headerlink" title="定义全局axios拦截器"></a>定义全局axios拦截器</h1><p>对axios做了个后置拦截器，就是返回数据时候，如果结果的code或者status不正常，那么对应弹窗提示<br>· src/axios.js</p><pre class="line-numbers language-none"><code class="language-none">import axios from 'axios'import Element from 'element-ui'import router from './router'import store from './store'//全局axios拦截axios.defaults.baseURL = "http://localhost:8080"//前缀,那些'/login'前补的东西//前置拦截，发起请求做的通知axios.interceptors.request.use(config =&gt; {    return config})axios.interceptors.response.use(response =&gt; {    let res = response.data;    console.log("------------");    console.log(res);    console.log("------------");    if (res.code == 200) {        return response;    } else {        Element.Notification.error({            title: '错误',            message: '这是一条错误的提示消息',            duration: 3 * 1000        });        return Promise.reject(response.data.msg);    }    //401是没有权限，后端异常可以查到},    error =&gt; {        console.log(error)        if(error.response.data){            error.message = error.response.data.msg        }        if(error.response.status === 401){ //为什么是401，可以在后端那异常源码去查            store.commit("REMOVE_INFO")            router.push("/login")        }        Element.Message.error(error.message, {duration: 3 * 1000})        return Promise.reject(error)    })<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后端因为返回的实体是Result，succ时候code为200，fail时候返回的是400，所以可以根据这里判断结果是否是正常的。另外权限不足时候可以通过请求结果的状态码来判断结果是否正常。这里都做了简单的处理。<br>前置拦截。因为项目太小，参考链接又没写，所以过！</p><p>main.js中导入axios.js，之后会有一个总的写好的main.js的</p>]]></content>
      
      
      <categories>
          
          <category> vueblog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vueblog2.2</title>
      <link href="/2022/09/01/vueblog2.3/"/>
      <url>/2022/09/01/vueblog2.3/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://juejin.cn/post/6844903823966732302">https://juejin.cn/post/6844903823966732302</a></p><p>事先说明，其实人家的文档也算很清楚，自己就是想拿个项目练练手，记录自己建的过程（对，就是白嫖），然后加上自己能懂的语言，如果其中有一些技术可能要自己去补一下，写博客时实在是觉得有点难以下手，不知道怎么说知识点，而且也比较散。</p><p>因为自己本身接触后端比较多，所以前端没有后端那么熟练，因此出错也比较多，文章也只是根据参考链接和视频去说一下自己解决的问题和看法，不会的看一下参考链接或者百度。</p><p>这个项目也算是比较旧了，没用一些比较创新的组件，可能更适合新学的吧。</p><hr><h1 id="头部信息"><a href="#头部信息" class="headerlink" title="头部信息"></a>头部信息</h1><p>头部的用户信息，应该包含三部分信息：id，头像、用户名，而这些信息我们是在登录之后就已经存在了sessionStorage。因此，我们可以通过store的getters获取到用户信息。</p><p>· components\Header.vue</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;    &lt;div class="m-content"&gt;        &lt;h3&gt;欢迎来到我的博客&lt;/h3&gt;        &lt;div class="block"&gt;            &lt;el-avatar :size="50" :src="user.avatar"&gt;&lt;/el-avatar&gt;            &lt;div&gt;{{ user.username }}&lt;/div&gt;        &lt;/div&gt;        &lt;div class="maction"&gt;            &lt;span&gt;                &lt;el-link href="/blogs"&gt;主页&lt;/el-link&gt;            &lt;/span&gt;            &lt;el-divider direction="vertical"&gt;&lt;/el-divider&gt;            &lt;span&gt;                &lt;el-link type="success" href="/blog/add"&gt;发表博客&lt;/el-link&gt;            &lt;/span&gt;            &lt;el-divider direction="vertical"&gt;&lt;/el-divider&gt;            &lt;span v-show="!hasLogin"&gt;                &lt;el-link type="primary" href="/login"&gt;登录&lt;/el-link&gt;            &lt;/span&gt;            &lt;span v-show="hasLogin"&gt;                &lt;el-link type="danger" @click="logout"&gt;退出&lt;/el-link&gt;            &lt;/span&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/template&gt;  &lt;script&gt;export default {    name: "Header",    data() {        return {            user: {                username: '请先登录',                avatar: 'https://cube.elemecdn.com/3/7c/3ea6beec64369c2642b92c6726f1epng.png'            },            hasLogin: false        }    },    methods: {        logout() {            const _this = this            _this.$axios.get("/logout", {                headers: {                    "Authorization": localStorage.getItem("token")                }            }).then(res =&gt; {                _this.$store.commit("REMOVE_INFO")                _this.$router.push("/login")            })        }    },    created() {        if (this.$store.getters.getUser.username) {            this.user.username = this.$store.getters.getUser.username            this.user.avatar = this.$store.getters.getUser.avatar            this.hasLogin = true        }    }}&lt;/script&gt;  &lt;style scoped&gt;.m-content {        margin: 0 auto;    text-align: center;}.maction {    margin: 10px 0;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码created()中初始化用户的信息，通过hasLogin的状态来控制登录和退出按钮的切换，以及发表文章链接的disabled，这样用户的信息就能展示出来了。<br>然后这里有个退出按钮，在methods中有个logout()方法，逻辑比较简单，直接访问/logout，因为之前axios.js中我们已经设置axios请求的baseURL，所以这里我们不再需要链接的前缀了哈。因为是登录之后才能访问的受限资源，所以在header中带上了Authorization。返回结果清楚store中的用户信息和token信息，跳转到登录页面。v-show就是为了切换登陆和退出按钮。</p><p>需要引入头部的时候</p><pre class="line-numbers language-none"><code class="language-none">import Header from "@/components/Header";data() {  components: {Header}}# 然后模板中调用组件&lt;Header&gt;&lt;/Header&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="博客分页"><a href="#博客分页" class="headerlink" title="博客分页"></a>博客分页</h1><p>需要几部分信息：</p><p>· 分页信息<br>· 博客列表内容，包括id、标题、摘要、创建时间<br>· views\Blogs.vue</p><p>列表在element-ui中直接使用时间线组件来作为我们的列表样式，还有分页组件</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;Header&gt;&lt;/Header&gt;    &lt;div class="block"&gt;      &lt;el-timeline&gt;        &lt;el-timeline-item :timestamp="blog.created" placement="top" v-for="blog in blogs"&gt;          &lt;el-card&gt;            &lt;h4&gt;              &lt;router-link :to="{name: 'BlogDetail', params: {blogId: blog.id}}"&gt;              &lt;!-- 这里可能会出warn，不用管，可能因为没有key，不过不影响项目运行 --&gt;                {{blog.title}}              &lt;/router-link&gt;              &lt;!-- 通过BlogDetail将id渲染到router的路径上 --&gt;            &lt;/h4&gt;            &lt;p&gt;              {{blog.description}}&lt;/p&gt;          &lt;/el-card&gt;        &lt;/el-timeline-item&gt;      &lt;/el-timeline&gt;      &lt;el-pagination class="mpage" background layout="prev, pager, next" :current-page=currentPage :page-size=pageSize        @current-change=page :total="total"&gt;      &lt;/el-pagination&gt;          &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Header from "@/components/Header.vue";export default {  name: 'Blogs',  components: { Header },  props: [''],  data() {    return {      blogs: {},      currentPage: 1,      total: 0,      pageSize: 5    };  },  watch: {},  created() {    this.page(1);  },  beforeMount() { },  mounted() { },  methods: {    page(currentPage) {      this.$axios.get('/blogs?currentPage=' + currentPage).then(res =&gt; {        console.log(res);        this.blogs = res.data.data.records;        this.currentPage = res.data.data.current;        this.total = res.data.data.total;        this.pageSize = res.data.data.size;      })    }  },  computed: {}}&lt;/script&gt;&lt;style&gt;.mpage {    text-align: center;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>data()中直接定义博客列表blogs、以及一些分页信息。methods()中定义分页的调用接口page（currentPage），参数是需要调整的页码currentPage，得到结果之后直接赋值即可。然后初始化时候，直接在mounted()方法中调用第一页this.page(1)。注意标题这里我们添加了链接，使用的是标签。</p>]]></content>
      
      
      <categories>
          
          <category> vueblog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vueblog2.0</title>
      <link href="/2022/09/01/vueblog2.4/"/>
      <url>/2022/09/01/vueblog2.4/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://juejin.cn/post/6844903823966732302">https://juejin.cn/post/6844903823966732302</a></p><p>事先说明，其实人家的文档也算很清楚，自己就是想拿个项目练练手，记录自己建的过程（对，就是白嫖），然后加上自己能懂的语言，如果其中有一些技术可能要自己去补一下，写博客时实在是觉得有点难以下手，不知道怎么说知识点，而且也比较散。</p><p>因为自己本身接触后端比较多，所以前端没有后端那么熟练，因此出错也比较多，文章也只是根据参考链接和视频去说一下自己解决的问题和看法，不会的看一下参考链接或者百度。</p><p>这个项目也算是比较旧了，没用一些比较创新的组件，可能更适合新学的吧。</p><hr><h1 id="安装基于Vue的markdown编辑器mavon-editor"><a href="#安装基于Vue的markdown编辑器mavon-editor" class="headerlink" title="安装基于Vue的markdown编辑器mavon-editor"></a>安装基于Vue的markdown编辑器mavon-editor</h1><pre class="line-numbers language-none"><code class="language-none">npm install mavon-editor --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>记得在main.js引用</p><h1 id="博客表单"><a href="#博客表单" class="headerlink" title="博客表单"></a>博客表单</h1><p>·views/BlogEdit.vue</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;Header&gt;&lt;/Header&gt;    &lt;div&gt;      &lt;el-form :model="ruleForm" :rules="rules" ref="ruleForm" label-width="100px"&gt;        &lt;el-form-item label="标题" prop="title"&gt;          &lt;el-input v-model="ruleForm.title"&gt;&lt;/el-input&gt;        &lt;/el-form-item&gt;        &lt;el-form-item label="摘要" prop="description"&gt;          &lt;el-input type="textarea" v-model="ruleForm.description"&gt;&lt;/el-input&gt;        &lt;/el-form-item&gt;        &lt;el-form-item label="内容" prop="content"&gt;          &lt;mavon-editor v-model="ruleForm.content"&gt;&lt;/mavon-editor&gt;        &lt;/el-form-item&gt;        &lt;el-form-item&gt;          &lt;el-button type="primary" @click="submitForm('ruleForm')"&gt;立即创建&lt;/el-button&gt;          &lt;el-button @click="resetForm('ruleForm')"&gt;重置&lt;/el-button&gt;        &lt;/el-form-item&gt;      &lt;/el-form&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Header from '@/components/Header.vue';export default {  name: 'BlogEdit.vue',  components: {    Header  },  props: [''],  data() {    return {      ruleForm: {        id: '',        title: '',        description: '',        content: ''      },      rules: {        title: [          { required: true, message: '请输入标题', trigger: 'blur' },          { min: 3, max: 25, message: '长度在 3 到 25 个字符', trigger: 'blur' }        ],        description: [          { required: true, message: '请输入摘要', trigger: 'blur' }        ],        content: [          { trequired: true, message: '请输入内容', trigger: 'blur' }        ]      }    };  },  watch: {},  created() {    const blogId = this.$route.params.blogId;//获取原本有的id    console.log(blogId);    const _this = this;    if(blogId){      this.$axios.get('/blog/'+ blogId).then(res=&gt;{        const blog = res.data.data;        _this.ruleForm.id = blog.id;        _this.ruleForm.title = blog.title;        _this.ruleForm.description = blog.description;        _this.ruleForm.content = blog.content;      })    }  },  beforeMount() { },  mounted() {  },  methods: {    submitForm(formName) {      this.$refs[formName].validate((valid) =&gt; {        if (valid) {          const _this = this;          _this.$axios.post('/blog/edit', this.ruleForm, {            headers: {              "Authorization": localStorage.getItem("token")            }          }).then(res =&gt; {            console.log(res);            _this.$alert('操作成功', '提示', {              confirmButtonText: '确定',              callback: action =&gt; {                _this.$router.push('/blogs');              }            });          })        }      })    }  },  computed: {}}&lt;/script&gt;&lt;style&gt;&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>逻辑依然简单，校验表单，然后点击按钮提交表单，注意头部加上Authorization信息，返回结果弹窗提示操作成功，然后跳转到博客列表页面。<br>然后因为编辑和添加是同一个页面，所以有了create()方法，比如从编辑连接/blog/7/edit中获取blogId为7的这个id。然后回显博客信息。获取方式是const blogId = this.$route.params.blogId。<br>不过编辑连接/blog/{id}/edit，可能要手动输edit，因为那个编辑按钮到后面才会写</p>]]></content>
      
      
      <categories>
          
          <category> vueblog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vueblog2.0</title>
      <link href="/2022/09/01/vueblog2.5/"/>
      <url>/2022/09/01/vueblog2.5/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://juejin.cn/post/6844903823966732302">https://juejin.cn/post/6844903823966732302</a></p><p>事先说明，其实人家的文档也算很清楚，自己就是想拿个项目练练手，记录自己建的过程（对，就是白嫖），然后加上自己能懂的语言，如果其中有一些技术可能要自己去补一下，写博客时实在是觉得有点难以下手，不知道怎么说知识点，而且也比较散。</p><p>因为自己本身接触后端比较多，所以前端没有后端那么熟练，因此出错也比较多，文章也只是根据参考链接和视频去说一下自己解决的问题和看法，不会的看一下参考链接或者百度。</p><p>这个项目也算是比较旧了，没用一些比较创新的组件，可能更适合新学的吧。</p><hr><h1 id="安装markdown-it"><a href="#安装markdown-it" class="headerlink" title="安装markdown-it"></a>安装markdown-it</h1><p>博客都是md格式，需要渲染成html显示</p><pre class="line-numbers language-none"><code class="language-none"># 用于解析md文档npm install markdown-it --save# md样式npm install github-markdown-css<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="博客详情"><a href="#博客详情" class="headerlink" title="博客详情"></a>博客详情</h1><p>· views\BlogDetail.vue</p><pre class="line-numbers language-none"><code class="language-none">&lt;template&gt;  &lt;div&gt;    &lt;Header&gt;&lt;/Header&gt;    &lt;div class="mblog"&gt;      &lt;h2&gt;{{blog.title}}&lt;/h2&gt;      &lt;el-button type="primary" icon="el-icon-edit"&gt;        &lt;router-link :to="{name: 'BlogEdit',param:{blogId:blog.id}}"&gt;          编辑        &lt;/router-link&gt;      &lt;/el-button&gt;      &lt;el-divider&gt;&lt;/el-divider&gt;      &lt;div class="markdown-body" v-html="blog.content"&gt;&lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/template&gt;&lt;script&gt;import Header from '@/components/Header.vue';import "github-markdown-css"export default {  name: '',  components: { Header },  props: [''],  data() {    return {      blog: {        id: "",        title: "",        content: ""      },      ownblog: false    };  },  watch: {},  created() {    const blogId = this.$route.params.blogId    console.log(blogId)    const _this = this    this.$axios.get('/blog/' + blogId).then(res =&gt; {      const blog = res.data.data      _this.blog.id = blog.id      _this.blog.title = blog.title;      var MardownIt = require("markdown-it")      var md = new MardownIt()      var result = md.render(blog.content)      _this.blog.content = result;      _this.ownblog = (blog.userId === _this.$store.getters.getUser.id)//编辑按钮的权限    })  },  beforeMount() { },  mounted() { },  methods: {},  computed: {}}&lt;/script&gt;&lt;style scoped&gt;.mblog {  box-shadow: 0 2px 12px 0 rgba(0, 0, 0, 0.1);  width: 100%;  min-height: 700px;  /* 左右 */  padding: 20px 10px;}&lt;/style&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>初始化create()方法中调用getBlog()方法，请求博客详情接口，返回的博客详情content通过markdown-it工具进行渲染.<br>标题下添加了个小小的编辑按钮，通过ownBlog （判断博文作者与登录用户是否同一人）来判断按钮是否显示出来。(不过可能因为这个项目没有注册，只有一个用户，可能用途不太明显)</p>]]></content>
      
      
      <categories>
          
          <category> vueblog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vueblog2.0</title>
      <link href="/2022/09/01/vueblog2.6/"/>
      <url>/2022/09/01/vueblog2.6/</url>
      
        <content type="html"><![CDATA[<p>参考链接：<a href="https://juejin.cn/post/6844903823966732302">https://juejin.cn/post/6844903823966732302</a></p><p>事先说明，其实人家的文档也算很清楚，自己就是想拿个项目练练手，记录自己建的过程（对，就是白嫖），然后加上自己能懂的语言，如果其中有一些技术可能要自己去补一下，写博客时实在是觉得有点难以下手，不知道怎么说知识点，而且也比较散。</p><p>因为自己本身接触后端比较多，所以前端没有后端那么熟练，因此出错也比较多，文章也只是根据参考链接和视频去说一下自己解决的问题和看法，不会的看一下参考链接或者百度。</p><p>这个项目也算是比较旧了，没用一些比较创新的组件，可能更适合新学的吧。</p><p>前端的话，建议可以跟着参考链接的视频学，或者先将页面的一些组件写好，然后再看一下script里的方法，有console.log的地方没有后面的代码都可以直接运行，可以尝试看一下方法到底做了什么，如果不行，先看前面有没有打错，然后再看方法有没有错</p><p>前端代码全程vue2</p><hr><h1 id="路由权限拦截"><a href="#路由权限拦截" class="headerlink" title="路由权限拦截"></a>路由权限拦截</h1><p>控制一下哪些页面是需要登录之后才能跳转的，如果未登录访问就直接重定向到登录页面</p><p>· src\permission.js</p><pre class="line-numbers language-none"><code class="language-none">import router from "./router";// 路由判断登录 根据路由配置文件的参数router.beforeEach((to, from, next) =&gt; {  if (to.matched.some(record =&gt; record.meta.requireAuth)) { // 判断该路由是否需要登录权限    const token = localStorage.getItem("token")    console.log("------------" + token)    if (token) { // 判断当前的token是否存在 ； 登录存入的token      if (to.path === '/login') {      } else {        next()      }    } else {      next({        path: '/login'      })    }  } else {    next()  }})<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过之前我们再定义页面路由时候的的meta信息，指定requireAuth: true，需要登录才能访问，因此这里我们在每次路由之前（router.beforeEach）判断token的状态，觉得是否需要跳转到登录页面。<br>记得main.js引入</p><h1 id="最终axios-js"><a href="#最终axios-js" class="headerlink" title="最终axios,js"></a>最终axios,js</h1><pre class="line-numbers language-none"><code class="language-none">import Vue from 'vue'import App from './App.vue'import router from './router'import store from './store'import Element from 'element-ui'import axios from 'axios'import mavonEditor from 'mavon-editor'import 'mavon-editor/dist/css/index.css'import "element-ui/lib/theme-chalk/index.css"import "./axios.js"import "./permission.js"// 关于vue动态路由刷新匹配错误问题以及解决办法：// https://blog.csdn.net/masierty/article/details/124954392Vue.use(Element)// useVue.use(mavonEditor)Vue.prototype.$axios = axios //new Vue({  router,  store,  render: h =&gt; h(App)}).$mount('#app')<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>至此，前端基本结束，整个项目也就完成了大概的设计，要改要加就是之后的事了。</p>]]></content>
      
      
      <categories>
          
          <category> vueblog </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo+matery 博客搭建</title>
      <link href="/2022/08/31/hexo_Blogbuild/"/>
      <url>/2022/08/31/hexo_Blogbuild/</url>
      
        <content type="html"><![CDATA[<p>Windows githubpage博客懒人搭建过程（采用hexo框架+部署到github）</p><span id="more"></span><h1 id="一、前期准备"><a href="#一、前期准备" class="headerlink" title="一、前期准备"></a>一、前期准备</h1><h2 id="1、安装前环境"><a href="#1、安装前环境" class="headerlink" title="1、安装前环境"></a>1、安装前环境</h2><p>Node.js<br>Git<br>（都是最新的，反正官网可能大概或许只有一种选择）</p><h2 id="2、安装Hexo"><a href="#2、安装Hexo" class="headerlink" title="2、安装Hexo"></a>2、安装Hexo</h2><h3 id="2-1-安装cnpm"><a href="#2-1-安装cnpm" class="headerlink" title="2.1 安装cnpm"></a>2.1 安装cnpm</h3><p>Node.js安装好后，命令行直接输入，不用进入任何包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">-g</span> cnpm <span class="token parameter variable">--registry</span><span class="token operator">==</span>https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明: -g 表示进行全局安装，–registry==<a href="https://registry.npm.taobao.org/">https://registry.npm.taobao.org</a> 表示使用淘宝镜像安装 cnpm<br>安装后验证: 在 cmd 中输入命令 cnpm -v, 可查看 cnpm 版本</p><h3 id="2-2-安装Hexo"><a href="#2-2-安装Hexo" class="headerlink" title="2.2 安装Hexo"></a>2.2 安装Hexo</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ cnpm <span class="token function">install</span> <span class="token parameter variable">-g</span> hexo-cli<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>说明: -g 表示全局安装，hexo-cli 为所安装的包<br>安装后验证: 在 cmd 中输入命令 hexo -v, 可查看 hexo 版本</p><h2 id="3、配置Github"><a href="#3、配置Github" class="headerlink" title="3、配置Github"></a>3、配置Github</h2><h3 id="3-1-Github创建仓库"><a href="#3-1-Github创建仓库" class="headerlink" title="3.1 Github创建仓库"></a>3.1 Github创建仓库</h3><p>新建一个名为: <a href="http://username.github.io/">http://username.github.io</a> 的仓库(username 为您的 Github 用户名)注册邮箱建议是自己能正常使用的，要翻墙的邮箱收邮件有点麻烦。</p><h3 id="3-2-配置SSH免密登录"><a href="#3-2-配置SSH免密登录" class="headerlink" title="3.2 配置SSH免密登录"></a>3.2 配置SSH免密登录</h3><p>主要是解决本机和服务器连接问题，就不用靠着用户名和密码了<br>1、首先打开电脑文件夹，找到 C:\Users\您的用户名\ .ssh文件夹并删除(如果没有，则直接进入第二步)</p><p>2、在 C:\Users\您的用户名 文件夹下右键打开 Git Bash Here 输入命令: ssh-keygen -t rsa -C “你的github登录邮箱” 生成.ssh秘钥，输入后连敲三次回车（不用填任何东西，连按三次，按完后最后会有一个图片。</p><p>3、生成了一个新的 C:\Users\您的用户名\ .ssh文件夹，打开这个文件夹，找到 .ssh\id_rsa.pub 文件，记事本打开并复制里面的内容</p><p>4、打开您的 github 主页，进入个人设置 -&gt; SSH and GPG keys -&gt; New SSH key，把复制的内容粘贴进去，title 随便填（其他都不用动，只需粘贴和改标题）保存即可，我们的公钥就添加成功了。</p><p>5、检测是否设置成功:</p><p>输入命令: </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">ssh</span> <span class="token parameter variable">-T</span> git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果提示Are you sure you want to continue connecting (yes/no)?，输入yes，然后会看到：</p><p>Hi 用户名! You’ve successfully authenticated, but GitHub does not provide shell access.<br>看到这个信息说明SSH已配置成功！ </p><p>6、git全局配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"liuxianan"</span>// 你的github用户名，非昵称$ <span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email  <span class="token string">"xxx@qq.com"</span>// 填写你的github注册邮箱 $ <span class="token function">git</span> config <span class="token parameter variable">--global</span> <span class="token parameter variable">-l</span> //查看<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4、hexo搭建博客"><a href="#4、hexo搭建博客" class="headerlink" title="4、hexo搭建博客"></a>4、hexo搭建博客</h2><h3 id="4-1-初始化"><a href="#4-1-初始化" class="headerlink" title="4.1 初始化"></a>4.1 初始化</h3><p>1、在你想要的位置新建一个文件（随便取，这就是以后你的博客，代码都在里边，主题修改，写文章都在里边，以后想移很麻烦）</p><p>2、文件夹里右键打开 Git Bash Here，输入hexo init 初始化 ，然后等文件自动下载</p><p>3、完成后，Git Bash Here里，直接hexo clean、hexo g<br>其中一步失败，回退之前的看有没有做漏，或者有没有删了source/_post里的hello-world文件，或者百度<br>然后hexo s，打开浏览器访问 <a href="http://localhost:4000/">http://localhost:4000</a> 即可看到内容 </p><h3 id="4-2-将博客部署到github个人主页上"><a href="#4-2-将博客部署到github个人主页上" class="headerlink" title="4.2 将博客部署到github个人主页上"></a>4.2 将博客部署到github个人主页上</h3><p>1、博客文件夹目录下 安装hexo-deployer-git </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>不弄，到时候部署会报错</p><p>2、博客文件夹目录下的 _config.yml 文件 ，末尾修改为</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span>deploy:  type: <span class="token function">git</span>  repository: github博客个人主页仓库code按钮下ssh链接  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、博客文件夹目录下，输入hexo d部署</p><p>4、浏览器输入对应域名即可访问</p><h2 id="5、主题修改"><a href="#5、主题修改" class="headerlink" title="5、主题修改"></a>5、主题修改</h2><p><a href="https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md">https://github.com/blinkfox/hexo-theme-matery/blob/develop/README_CN.md</a><br>其实不需要太多修改，改一下名字和图片基本就差不多，里面都配置好了，主要是网上大家配置的都和文档相差不大</p>]]></content>
      
      
      <categories>
          
          <category> hexo博客 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 搭建过程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/08/28/First/"/>
      <url>/2022/08/28/First/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>!</p><span id="more"></span> <h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="创建一个新文章"><a href="#创建一个新文章" class="headerlink" title="创建一个新文章"></a>创建一个新文章</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="运行本地站点"><a href="#运行本地站点" class="headerlink" title="运行本地站点"></a>运行本地站点</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 第一篇文章 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
